openapi: 3.0.3
info:
  description: Documentation Nav portal REST API
  version: '0.1'
  title: Nav REST API
servers:
  - url: /rest
paths:
  /Dashboards:
    get:
      tags:
        - Dashboard
      summary: Hent navn og id på alle dashboard
      description: Henter id og navn på alle dashboard. Ikke tilhørende områder/tjenester.
      operationId: getDashboards
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DashboardNameId'
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden
          content: {}
        '404':
          description: Not Found
          content: {}
  /Dashboard:
    post:
      tags:
        - Dashboard
      summary: Legg til nytt dashboard.
      description: Legg til nytt dashboard. Id genereres i backend, og sendes tilbake
      operationId: addDashboard
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dashboard'
          text/plain:
            schema:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
                format: uuid
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden
          content: {}
        '404':
          description: Not Found
          content: {}
      deprecated: false
  /Dashboard/{Dashboard_id}:
    put:
      tags:
        - Dashboard
      summary: Legg inn/ fjern/ endre rekkefølge på områder på dashbord
      description: Legg inn liste av område-ider som hører til på dashboardet. Første id vil komme først osv.
      operationId: putDashboards
      parameters:
        - name: Dashboard_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          'application/json':
            schema:
              type: array
              items:
                type: string
                format: uuid
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden
          content: {}
        '404':
          description: Not Found
          content: {}
      deprecated: false
    get:
      tags:
        - Dashboard
      summary: Hent dashboard med innhold.
      description: henter et dashboard med alle underliggende områder/ tjenester
      operationId: getDashboard
      parameters:
        - name: Dashboard_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dashboard'
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden
          content: {}
        '404':
          description: Not Found
          content: {}
      deprecated: false
    delete:
      tags:
        - Dashboard
      summary: Slett et dashboard med.
      description: sletter dashboard med uuid dashboard_id
      operationId: deleteDashboard
      parameters:
        - name: Dashboard_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '201':
          description: Deleted
        '403':
          description: Forbidden
          content: { }
        '404':
          description: Not Found
          content: { }
      deprecated: false
  /Areas/{Dashboard_id}:
    get:
      tags:
        - Area
      summary: Alle områder
      operationId: AreasOnDashBoard
      description: Henter alle områder med underliggende tjenster
      parameters:
        - name: Dashboard_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Area'
        '401':
          description: Unauthorized
          content: { }
        '403':
          description: Forbidden
          content: { }
        '404':
          description: Not Found
          content: { }
      deprecated: false
  /Areas:
    get:
      tags:
        - Area
      summary: Alle områder
      operationId: Area
      description: Henter alle områder med underliggende tjenster
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Area'
        '401':
          description: Unauthorized
          content: { }
        '403':
          description: Forbidden
          content: { }
        '404':
          description: Not Found
          content: { }
      deprecated: false
    post:
      tags:
        - Area
      summary: Legg til ett nytt område
      requestBody:
        description: Legg til ett nytt område. Her trenger IKKE services å være med ved innsending.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Area'
          text/plain:
            schema:
              type: string
      responses:
        '201':
          description: Created
        '403':
          description: Forbidden
          content: { }
        '404':
          description: Not Found
          content: { }

  /Area/{Area_id}/{Service_id}:
    put:
      tags:
        - Area
      summary: Legg en tjeneste til et område
      description: Legg inn uid for område og tjenesten som skal legges til det.
      parameters:
        - name: Area_id
          in: path
          required: true
          schema:
            type: string
        - name: Service_id
          in: path
          required: true
          schema:
            type: string

      responses:
        '201':
          description: Created
        '403':
          description: Forbidden
          content: { }
        '404':
          description: Not Found
          content: { }
    delete:
      tags:
        - Area
      summary: Fjern tjeneste fra område
      description: Legg inn uid for område og tjenesten som skal fjernes.
      parameters:
        - name: Area_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: Service_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '201':
          description: Deleted
        '403':
          description: Forbidden
          content: { }
        '404':
          description: Not Found
          content: { }
  /Area/{Area_id}:
    delete:
      tags:
        - Area
      summary: Fjern område
      description: Legg inn uid på området som skal fjernes.
      parameters:
        - name: Area_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '201':
          description: Deleted
        '403':
          description: Forbidden
          content: { }
        '404':
          description: Not Found
          content: { }
  /Services/Types:
    get:
      tags:
        - Service
      summary: Hent alle tjenestetyper
      operationId: ServiceType
      description: Tjenester skal kategoriseres på typer som kan finnes her.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: Applikasjon
        '401':
          description: Unauthorized
          content: { }
        '403':
          description: Forbidden
          content: { }
        '404':
          description: Not Found
          content: { }
      deprecated: false
  /Services:
    get:
      tags:
        - Service
      summary: Hent alle tjenester med tjenesteavhengigheter
      operationId: Service
      description: Henter alle tjenester med tjenesteavhengigheter - ett lag dypt. Det vil si at dersom tjeneste A er avhengig av tjeneste B som er avhengig av tjeneste C, vil ikke avhengighet B => C dukke opp.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Service'
        '401':
          description: Unauthorized
          content: { }
        '403':
          description: Forbidden
          content: { }
        '404':
          description: Not Found
          content: { }
      deprecated: false
  /Service:
    post:
      tags:
        - Service
      summary: Legg til tjeneste
      description: Opprett en ny tjeneste. Merk at type er predefinert og strengt, se endepunkt /Services/Types for en liste over mulige verdier.
      requestBody:
        description: Legg til en ny tjeneste
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
          text/plain:
            schema:
              type: string
      responses:
        '201':
          description: Deleted
        '403':
          description: Forbidden
          content: { }
        '404':
          description: Not Found
          content: { }
    put:
      tags:
        - Service
      summary: Rediger tjeneste
      description: Rediger tjenesteparametre
      requestBody:
        description: Oppdaterte verdier for tjeneste
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
          text/plain:
            schema:
              type: string
      responses:
        '201':
          description: Updated
        '403':
          description: Forbidden
          content: { }
        '404':
          description: Not Found
          content: { }
  /Service/{Service_id}:
    delete:
      tags:
        - Service
      summary: Slett en tjeneste
      description: Slett tjeneste med id Service_id.
      parameters:
        - name: Service_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '201':
          description: Deleted
        '403':
          description: Forbidden
          content: { }
        '404':
          description: Not Found
          content: { }

  /ServiceStatus:
    post:
      tags:
        - Record
      summary: Legg til status på en tjeneste
      description: Legg til status på en tjeneste. Mulige statuser OK / DOWN / ISSUE.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceStatus'
          text/plain:
            schema:
              type: string
      responses:
        '201':
          description: Deleted
        '403':
          description: Forbidden
          content: { }
        '404':
          description: Not Found
          content: { }
  /Service/{Service_id}/{DependentOnService_id}:
    put:
      tags:
        - Service
      summary: Legg til tjenesteavhengighet.
      description: Legg til en tjenesteavhengighet til tjenesten med id Service_id.
      parameters:
        - name: Service_id
          in: path
          required: true
          schema:
            type: string
        - name: DependentOnService_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Created
        '403':
          description: Forbidden
          content: { }
        '404':
          description: Not Found
          content: { }
components:
  schemas:
    DashboardNameId:
      title: Dashboard
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          example: "84e49ba0-7409-41ed-8ebe-949ad94dc1d3"
        name:
          type: string
          example: "Privatperson"
    Dashboard:
      title: Dashboard
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          example: "84e49ba0-7409-41ed-8ebe-949ad94dc1d3"
        name:
          type: string
          example: "Privatperson"
        areas:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/Area'
    Area:
      title: Area
      type: object
      properties:
        name:
          type: string
        id:
          type: string
          format: uuid
          readOnly: true
        description:
          type: string
        icon:
          type: string
        services:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/Service'
        status:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/Status'
      required:
        - name
    Service:
      title: Service
      type: object
      properties:
        name:
          type: string
        id:
          type: string
          format: uuid
          readOnly: true
        type:
          $ref: '#/components/schemas/ServiceType'
        team:
          type: string
        dependencies:
          type: array
          items:
            $ref: '#/components/schemas/Service'
        monitorlink:
          type: string
        description:
          type: string
        logglink:
          type: string
        status:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/Status'
    ServiceStatus:
      title: ServiceStatus
      type: object
      properties:
        serviceId:
          type: string
          format: uuid
        status:
          $ref: '#/components/schemas/Status'

    Status:
      type: string
      enum:
        - OK
        - ISSUE
        - DOWN
    ServiceType:
      type: string
      enum:
        - APPLIKASJON
        - TJENESTE
